extends ../../layout
block content
	style.
		.editor-row{
			z-index: 3;
			position: relative;
		}
		.editor-row .editor-contents{
			z-index: 1;
			position: relative;
		}
		.editor-hr{
			margin: 8px 4px;
			margin-left: 8.33%;
			border-color: #ffffffb0;
			visibility: hidden;
		}
		.editor-row:hover .editor-hr{
			visibility: visible;
		}
		.editor-hr::before{
			content: " ";
			height: 2px;
			margin-top: -8px;
			margin-left: -6px;
			display: block;
			border-style: solid;
			border-width: 6px;
			border-color: transparent transparent transparent #ffffffb0;
		}
	div(class="w3-container")
		form(name="pitlayout" method="post")
			each item, i in pitlayout
				//p=JSON.stringify(item)
				div(id=`row_${i}` class="w3-row editor-row" row=i)
					div(class="editor-contents")
						hr(class="editor-hr")
						//row remove
						div(id=`removerow_${i}` class="w3-col m1 w3-padding-small w3-right-align editor-button")
							div(class="w3-btn theme-gray theme-input" style="width: 38px; height: 38px;") 
								span(style="") -
						//sort draggy
						div(id=`sort_${i}` class="w3-col m1 w3-padding-small editor-sort")
							div(class="w3-btn theme-gray theme-input" style="width: 38px; height: 38px; cursor: grab;") 
								span(style="") â‰¡
						//type
						div(id=`type_${i}` class="w3-col m2 w3-padding-small editor-type")
							- //   onchange=`handleTypeChange(${i})`
							select(name=`type_${i}` class="theme-input w3-btn w3-block" row=i)
								if item.type == "h2"
									option(value="h2" selected) Header
								else
									option(value="h2") Header
								if item.type == "spacer"
									option(value="spacer" selected) Spacer
								else
									option(value="spacer") Spacer
								if item.type == "textblock"
									option(value="textblock" selected) Text Block
								else
									option(value="textblock") Text Block
								if item.type == "checkbox"
									option(value="checkbox" selected) Checkbox
								else
									option(value="checkbox") Checkbox
								if item.type == "multiselect"
									option(value="multiselect" selected) Multi-select
								else
									option(value="multiselect") Multi-select
						//label
						div(id=`label_${i}` class="w3-col m4 w3-padding-small editor-label" style=`${item.type == 'spacer' ? 'visibility: hidden;' : ''}`)
							input(type="text" name=`label_${i}` class="theme-input w3-block" placeholder="Label" value=item.label)
						//multiselect options
						div(id=`options_${i}` class="w3-col m3 w3-padding-small editor-multiselect" style=`${item.type == 'multiselect' ? '' : 'visibility: hidden;'}`)
							if item.options
								each option, j in item.options
									div(class="w3-col" style="padding-bottom: 8px;" id=`optionsid_${i}_${j}`)
										input(type="text" name=`options_${i}_${j}` class="theme-input w3-block" placeholder="Option" value=option)
									div(id=`removebutton_${i}_${j}` class="w3-col m1 w3-padding-small w3-right-align editor-button")
										div(class="w3-btn theme-gray theme-input" style="width: 38px; height: 38px;" row=i item=j) 
											span(style="") -
									//
										div(id=`removebutton_${i}_${j}` class="w3-padding-small editor-button" style=`${item.type == 'multiselect' ? '' : 'visibility: hidden;'}`)
											div(class="w3-btn theme-input" style="border-radius: 50%; height: 38px; width: 38px;" row=i item=j)
												span(style="font-size: 1.4em; position: relative; top: -2px;") -
							div(id=`sampleOption_${i}` class="w3-col" style="padding-bottom: 8px; display: none;")
								input(type="text" name=`option_${i}_${j}` class="theme-input w3-block" placeholder="Option" value=option)
							div(id=`sampleRemoveButton_${i}` class="w3-col m1 w3-padding-small w3-right-align editor-button" style=`display: none; ${item.type == 'multiselect' ? '' : 'visibility: hidden;'}`)
								div(id=`sampleRemoveDiv_${i}` class="w3-btn theme-gray theme-input" style="width: 38px; height: 38px;" row=i item=j)
									span(style="") -
						//+ button for multiselect
						div(id=`button_${i}` class="w3-col m1 w3-padding-small editor-button" style=`${item.type == 'multiselect' ? '' : 'visibility: hidden;'}`)
							div(class="w3-btn theme-input" style="border-radius: 50%; height: 38px; width: 38px;" row=i)
								span(style="font-size: 1.4em; position: relative; top: -2px;") +
					
	script.
		//set url to add year in request if it doesn't already have it
		window.history.replaceState({}, document.title, window.location.href.split("?")[0] + "?year=#{year}");
		
		$(".editor-type select").change(handleTypeChange);
		//$(".editor-type select").change();
		$(".editor-button div").click(handleAddOptionClick);
		$(".editor-sort div").on("mousedown", handleSortStart);
		$(document).on("mousemove", handleMouseMove);
		$(".editor-row").on("mouseenter", handleHover)
		
		var dragOffsetX = -32, dragOffsetY = -24;
		var currentlyDragging = false, isTicking = false;
		var dragElement;
		var currentHoverIdx = 0;
		
		function handleHover(evt){
			var thisFuncName = "handleHover(): ";
			
			var row = $(this);
			var idx = parseInt(row.attr("row"));
			
			if (!isNaN(idx)) {
				currentHoverIdx = idx;
			}
			console.log(thisFuncName + "currentHoverIdx=" + currentHoverIdx);
		}
		
		function handleSortStart(evt){
			var thisFuncName = "handleSortStart(): ";
			
			var sortBtn = $(this);
			//var row = parseInt( sortBtn.parent().parent().parent().attr("row") );
			
			//$(document.body).css("cursor", "grabbing")
			
			var rowElement = sortBtn.parent().parent().parent();
			var newRowElement = rowElement.clone().css("position", "absolute").css("width", "100%").css("z-index", "2")
				.css("top", evt.pageY + dragOffsetY).css("left", evt.pageX + dragOffsetX)
				.appendTo(document.body);
			
			$(newRowElement).children().css("z-index", "4");
			console.log(thisFuncName + "$(newRowElement)=" + $(newRowElement));
			console.log(thisFuncName + "$(newRowElement).children()[0]=" + $(newRowElement).children()[0]);
			
			rowElement.css("opacity", 0.5);
			newRowElement.find("hr").remove();
			$(document.body).css("cursor", "grabbing");
			$(".editor-sort div").css("cursor", "grabbing");
			
			dragElement = newRowElement;
			
			currentlyDragging = true;
			
			$(document).on("mouseup", handleSortEnd);
			
			//console.log(row);
		}
		
		function handleSortEnd(){
			var thisFuncName = "handleSortEnd(): ";
			if (currentlyDragging) {
				var row = parseInt(dragElement.attr("row"))
				
				currentlyDragging = false;
				dragElement.remove();
				$(`div[row=${row}]`).css("opacity", 1);
				$(document.body).css("cursor", "")
				$(".editor-sort div").css("cursor", "grab");
				
				var rowToInsert = $(`div[row=${currentHoverIdx}]`);
				
				console.log(thisFuncName + `Going to move row ${row} into row ${currentHoverIdx}`);

				var movingDiv = document.getElementById(`row_${row}`);
				var insertBeforeDiv = document.getElementById(`row_${currentHoverIdx}`);
				insertBeforeDiv.parentNode.insertBefore(movingDiv, insertBeforeDiv); // div.nextSibling;
			}
		}
		
		function handleMouseMove(evt){
			var thisFuncName = "handleMouseMove(): ";
			
			if(currentlyDragging){
				
				dragElement.css("top", evt.pageY + dragOffsetY).css("left", evt.pageX + dragOffsetX)
				
			}
		}
		
		function handleTypeChange(e){
			var thisFuncName = "handleTypeChange(): ";
			//console.log(thisFuncName + "e=" + JSON.stringify(e));
			
			var select = $(this);
			var row = select.attr("row");
			var type = select.val();
			console.log(thisFuncName + "type=" + type);
			//console.log(thisFuncName + "select.parent()=" + JSON.stringify(select.parent().parent()));
			//var row = parseInt( select.parent().parent().attr("row") );
			
			console.log(thisFuncName + "row=" + row);
			console.log(thisFuncName + "$(options_...)=" + $(`options_${row}`));
			console.log(thisFuncName + "options_...=" + `options_${row}`);
			//console.log(thisFuncName + "select.parent()=" + select.parent());
			
			if( type == "multiselect" ){
				
				$(`#options_${row}`).css("visibility", "visible");
				$(`#button_${row}`).css("visibility", "visible");
			}
			else{
				$(`#options_${row}`).css("visibility", "hidden");
				$(`#button_${row}`).css("visibility", "hidden");
			}
			
			if( type == "spacer" ){
				
				$(`#label_${row}`).css("visibility", "hidden");
			}
			else{
				$(`#label_${row}`).css("visibility", "visible");
			}
			
			console.log(thisFuncName + "$(this).val()=" + $(this).val());
		}
		
		function handleAddOptionClick(){
			var thisFuncName = "handleAddOptionClick(): ";
			
			var button = $(this);
			// console.log(thisFuncName + "this=" + JSON.stringify(this));
			// var html = button.html();
			// console.log(thisFuncName + "html=" + html);
			var row = button.attr("row");
			console.log(thisFuncName + "row=" + row);
			var item = button.attr("item");
			console.log(thisFuncName + "item=" + item);
			if (!item) {
				// var id = button.attr("id");
				// console.log(thisFuncName + "id=" + id);
				//var row = parseInt( button.parent().parent().attr("row") );
				var numExistingOptions = $(`#options_${row}`).children().length - 1;
				
				console.log(numExistingOptions)
				
				var sampleOption = $(`#sampleOption_${row}`);
				var newOption = sampleOption.clone().appendTo( $(`#options_${row}`) ).show();
				$(newOption.children()[0]).attr("name", `option_${row}_${numExistingOptions}`);

				var sampleRemoveButton = $(`#sampleRemoveButton_${row}`);
				var newRemoveButton = sampleRemoveButton.clone().appendTo( $(`#options_${row}`) ).show();
				$(newRemoveButton.children()[0]).attr("row", 1000);
				newRemoveButton.click(handleAddOptionClick);
				$(newRemoveButton.children()[0]).attr("name", `removebutton_${row}_${numExistingOptions}`);

				console.log(thisFuncName + "button=" + button);
			} else {
				var removeOption = document.getElementById(`optionsid_${row}_${item}`);
				removeOption.parentNode.removeChild(removeOption);
				var removeButton = document.getElementById(`removebutton_${row}_${item}`);
				removeButton.parentNode.removeChild(removeButton);
			}
		}