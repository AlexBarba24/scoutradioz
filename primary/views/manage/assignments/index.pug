//-
	Org mgmt page to create/delete pit scouting pairs.
		manage/assignments.ts	
		'/manage/assignments'
	//
extends ../../layout
block content
	h2=title
	if !areTeamsListedInDB
		a(href="/manage") 
			div(class="w3-btn theme-red") <b>WARNING: No teams found in DB!</b><br/>Click here, then update list of teams (or) edit team list.
	table(class="w3-table")
		each subteam in subteams
			th(class="w3-center" style=`width: ${99.999 * 1/subteams.length}%;`)=subteam.label
		tr
			each subteam in subteams
				td 
					ul(class="w3-ul")
						each member in subteam.members
							li(class="w3-no-border")
								button(class='w3-btn w3-block w3-dark-gray' chosenstate='false' id=member._id onclick=`toggle("${member._id}")`)= member.name
	form#setmemberpair(name="setmemberpair" method="post" action="/manage/assignments/setscoutingpair")
		input#setmemberpairdata(type="hidden", name="data")
	button(class="w3-btn w3-block theme-submit" onclick="submitPair()")!=msg('manage.assignments.submitNewGroup')

	hr 
	if assigned.length > 0
		h4!=msg('manage.assignments.scoutingGroups')
	ul(class="w3-ul w3-left-align")
		each pair in assigned
			li(class="w3-no-border")
				- var thisButtonLabel = pair.member1.name;
				- if (pair.member2) thisButtonLabel += ', ' + pair.member2.name;
				- if (pair.member3) thisButtonLabel += ', ' + pair.member3.name;
				button(onclick=`deletePair("${pair._id}")` class="w3-btn theme-red")!=msg('manage.assignments.deleteGroup')
				|	#{thisButtonLabel}
	button(onclick="clearScoutingPairs()" class="w3-btn theme-red")!=msg('manage.assignments.clearGroups')
	form(method="post" action="/manage/assignments/deletescoutingpair" id="deletememberpair")
		input(id="deletememberpairinput" name="data" type="hidden")
	hr 
	
	form(action='/manage/assignments/generateteamallocations' method='post')
		button(class="w3-btn theme-submit" type="submit")!=msg('manage.assignments.assignPitTeams')
	br
	br 
	div( onclick=`clearPitData()`)
		button(class="w3-btn theme-red strong" type="submit")!=msg('manage.assignments.clearAllPit')
	- const permanentDeleteWarning = msg('manage.assignments.permanentDeleteWarning', {number: pitScoutingCount, eventName, type: 'pit'});
	script.
	
		function clearScoutingPairs() {
			Confirm.show(`!{msg('manage.assignments.clearGroupsWarning')}`)
				.then(response => {
					if (!response.cancelled) {
						$.post('/manage/assignments/clearscoutingpairs', {})
							.done(resp => {
								//- Show card then refresh page
								NotificationCard.show(resp.message);
								setTimeout(() => {
									window.location.href = window.location.href;
								}, 2000);
							})
							.fail(err => {
								NotificationCard.error(`Error: ${err.statusText || err.responseText}`);
							});
					}
				})
		}
		
		function clearPitData(){
			
			const numberDeleting = !{pitScoutingCount};
			const url = '/manage/assignments/clearpitallocations';
			
			// Prompt user for their password
			PasswordPrompt.show(`!{msg('manage.assignments.erasePitAssignmentsAndData')}`)
				.then(result => {
					if (result.cancelled === false) {
						
						if (numberDeleting && numberDeleting > 0) {
							setTimeout(() => {
								//- make ABSOLUTE SURE THEY WANNA PROCEED if they're actually gonna delete data
								Confirm.show(`!{permanentDeleteWarning}`, {
									yesText: '!{msg('yesProceed')}',
									noText: 'Cancel',
									yesTimeout: 2000
								})
									.then(result2 => {
										if (result2.cancelled === false) {
											doPostWithPassword(url, result.password);
										}
									})
							}, 350);
						}
						else {
							// Send request immediately if the user didn't cancel & there's nothing to delete
							doPostWithPassword(url, result.password)
						}
					}
				});
		}
		
		function doPostWithPassword(url, password) {
			$.post(url, {
				password: password
			}, 
			function( data, status ){
				if(data && data.message) {
					// error
					if (data.status && data.status >= 400)
						NotificationCard.error(data.message);
					// success/message
					else
						NotificationCard.show(data.message);
				}
			});
		}
		
		var selectedDict = {};
		var selectedArray = [];
		var selected = 0;
		
		function toggle(id)
		{
			console.log(id);
			var currentstate = document.getElementById(id).getAttribute("chosenstate");
			console.log(currentstate);
			
			if (currentstate == "false")
			{
				if (selected >= 3)
					return;
				
				document.getElementById(id).className = "w3-btn w3-light-gray w3-block";
				document.getElementById(id).setAttribute("chosenstate", "true");
				
				if( selectedDict.member1 && selectedDict.member2 )
					selectedDict.member3 = id;
					
				else if( selectedDict.member2 && selectedDict.member3 )
					selectedDict.member1 = id;
					
				else if( selectedDict.member1 && selectedDict.member3 )
					selectedDict.member2 = id;
				
				else if( selectedDict.member1 )
					selectedDict.member2 = id;
					
				else
					selectedDict.member1 = id;
				
				selected++;
			}
			else
			{
				document.getElementById(id).className = "w3-dark-gray w3-btn w3-block";
				document.getElementById(id).setAttribute("chosenstate", "false");
				
				//shuffles selectedDict down to make sure we always have member1 and 2
				if( selectedDict.member1 == id ){
					selectedDict.member1 = selectedDict.member2;
					selectedDict.member2 = selectedDict.member3;
					delete selectedDict.member3;
					
				}else if( selectedDict.member2 == id ){
					selectedDict.member2 = selectedDict.member3;
					delete selectedDict.member3;
				
				}else if( selectedDict.member3 == id ){
					delete selectedDict.member3;
				
				}if (selected > 0)
					selected--;
			}
		}
		
		function submitPair()
		{
			if (selected < 1)
				return;
			
			console.log(selectedArray);
			var selectedArray = [];
			for (var key in selectedDict)
			{
				console.log(selectedDict[key]);
				selectedArray.push(selectedDict[key]);
			}
			console.log(selectedArray.toString());
			//document.getElementById("selectedString").innerHTML = selectedArray.toString();
			document.getElementById("setmemberpairdata").value = JSON.stringify(selectedDict);
			
			document.getElementById("setmemberpair").submit();
		}
		
		function deletePair(pairId)
		{
			console.log("deleted " + pairId);
			
			document.getElementById("deletememberpairinput").value = pairId;
			
			document.getElementById("deletememberpair").submit();
		}
	div(id="selectedString")
