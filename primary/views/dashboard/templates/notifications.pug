div(class="w3-auto")
	if process.env.DISABLE_PUSH_NOTIFICATIONS === 'true'
		script console.log("Push notifications are disabled on the server; Not loading the template.")
	else 
		div.w3-row
			label(class="switch theme-inline-padding")
				input(type="checkbox" id="toggleNotifs")
				span(class="toggle" id="toggleNotifsToggle")
			label(class="w3-show-inline-block theme-inline-padding" for="toggleNotifs")
				span Match notifications are&nbsp;
				span(id="enabledOrDisabled" class="strong") disabled
				span &nbsp;for this device.
			//- Below: The unique endpoint for this given user's push subscription. If it matches the device, then the switch will toggle ON.
			input(type="hidden" name="user-notification-endpoint" value=(user.push_subscription ? user.push_subscription.endpoint : ''))
		script.
			
			var scriptURL = '/service-worker-v1.js'; // Can't serve the service worker from amazonaws.com, it has to be straight from scoutradioz.com
			
			//- Check if notifications are enabled on this device
			var notifsEnabled = false;
			var thisDeviceEndpoint = localStorage.getItem('push-subscription-endpoint');
			var thisUserEndpoint = $('input[name=user-notification-endpoint]').val();
			if (thisDeviceEndpoint === thisUserEndpoint) {
				notifsEnabled = true;
			}
			//- For some reason, Firefox keeps the hidden checkbox checked when refreshing the page, so I have to uncheck it manually
			setLabel(notifsEnabled);
			$('#toggleNotifs').prop('checked', notifsEnabled);
			
			$(() => {
				//- Adding animate class AFTER possibly toggling it, so the user doesn't see the smooth movement every time the page loads
				$('#toggleNotifsToggle').addClass('animate');
			});
			
			$('#toggleNotifs').on('click', onToggleClick);
			
			async function onToggleClick(e) {
				//- Prevent the switch from switching immediately
				e.preventDefault();
				
				if (notifsEnabled) {
					//send request to the server to disable notifications
					let succeeded = await cancelSubscription();
					if (succeeded) {
						notifsEnabled = false;
						$(e.target).prop('checked', false);
						setLabel(false);
					}
				}
				else {
					//- Make sure the user wants to enable notifications before requesting them
					let conf = await Confirm.show('Enable match notifications on this device?');
					if (conf.cancelled === false) {
						//- Returns a boolean, whether the subscription was successful
						let result = await enablePushNotifications();
						$(e.target).prop('checked', result);
						setLabel(result);
						notifsEnabled = result;
					}
				}
			}
			
			async function enablePushNotifications() {
				
				var card = new NotificationCard('Subscribing to push notifications...', {ttl: 0, darken: true});
				card.show();
				
				//register service worker
				var registration = await registerServiceWorker();
				console.log(registration);
				
				try {
					//ask permission
					await askPermission();
					
					var pushSubscription = await subscribeUserToPush();
					
					//- Save the subscription hash to localStorage so we can identify if "THIS" device is the one which will receive notifications
					//- 	I'd rather only support push notifs for one device per user at a time, for the time being
					localStorage.setItem('push-subscription-endpoint', pushSubscription.endpoint);
					
					var data = await sendSubscription(pushSubscription);
					
					card.remove(500);
					
					if (data && data.success) {
						return true;
					}
					else {
						NotificationCard.warn("Something might have gone wrong. Data: " + JSON.stringify(data));
						return false;
					}
				}
				catch (err){
					console.error(err);
					card.remove();
					NotificationCard.show("An error occurred: " + err, {type: "bad"});
				}
			}
			
			//- Just set the label to "enabled" or "disabled"
			function setLabel(notifsEnabled) {
				if (notifsEnabled === true) {
					$('#enabledOrDisabled').text('enabled');
				}
				else {
					$('#enabledOrDisabled').text('disabled');
				}
			}
			
			//- Cancel the push subscription for the given user.
			function cancelSubscription(cb){
				return new Promise((resolve, reject) => {
					var card = new NotificationCard('Disabling push notifications...', {ttl: 0, darken: true});
					card.show();
					
					$.ajax({
						type: "POST",
						url: '/notifications/disable-subscription/',
					})
					.done((data, status, xhr) => {
						console.log(data);
						resolve(true);
					})
					.fail((xhr, status, error) => {
						console.error(error);
						NotificationCard.error("An error occurred: " + err, {ttl: 0, exitable: true});
						resolve(false);
					})
					.always(() => {
						card.remove(500);
					});
				})
			}
			
			function sendSubscription(pushSubscription){
				
				return new Promise((resolve, reject) => {
					
					const subscription = JSON.stringify(pushSubscription);
					
					$.ajax({
						type: "POST",
						url: '/notifications/save-subscription/',
						contentType: 'application/json',
						processData: false,
						data: subscription,
					})
					.done((data, status, xhr) => {
						resolve(data);
					})
					.fail((xhr, status, error) => {
						reject(error);
					});
				});
			}
			
			function registerServiceWorker() {
				
				if (!('serviceWorker' in navigator)) {
				// Service Worker isn't supported on this browser, disable or hide UI.
					return "No ServiceWorker";
				}
				
				if (!('PushManager' in window)) {
				// Push isn't supported on this browser, disable or hide UI.
					return "No PushManager";
				}
				
				return navigator.serviceWorker.register(scriptURL)
				.then(function(registration) {
					console.log('Service worker successfully registered.');
					return registration;
				})
				.catch(function(err) {
					console.error('Unable to register service worker.', err);
				});
			}
			
			function askPermission() {
				return new Promise(function(resolve, reject) {
					const permissionResult = Notification.requestPermission(function(result) {
						resolve(result);
					});
					
					if (permissionResult) {
						permissionResult.then(resolve, reject);
					}
				})
				.then(function(permissionResult) {
					if (permissionResult !== 'granted') {
						throw new Error('We weren\'t granted permission.');
					}
				});
			}
			function subscribeUserToPush() {
				return navigator.serviceWorker.register(scriptURL)
				.then(function(registration) {
					const subscribeOptions = {
					userVisibleOnly: true,
					applicationServerKey: urlBase64ToUint8Array(
						'BDc8VHzWNVkZ2C6MWUf30TyXMm-trm86-K9bfl6ejCvbjAwgegokOLfC48e65i0umB0NIzNlNhTgbSC0QTRyEPQ'
						),
					//applicationServerKey: urlBase64ToUint8Array(
					//	'BDc8VHzWNVkZ2C6MWUf30TyXMm-trm86-K9bfl6ejCvbjAwgegokOLfC48e65i0umB0NIzNlNhTgbSC0QTRyEPQ'
					//)
					};
					
					return registration.pushManager.subscribe(subscribeOptions);
				})
				.then(function(pushSubscription) {
					console.log('Received PushSubscription: ', JSON.stringify(pushSubscription));
					return pushSubscription;
				});
			}
			function urlBase64ToUint8Array(base64String) {
				const padding = '='.repeat((4 - base64String.length % 4) % 4);
				const base64 = (base64String + padding)
				.replace(/-/g, '+')
				.replace(/_/g, '/');

				const rawData = window.atob(base64);
				const outputArray = new Uint8Array(rawData.length);

				for (let i = 0; i < rawData.length; ++i) {
					outputArray[i] = rawData.charCodeAt(i);
				}
				return outputArray;
			}